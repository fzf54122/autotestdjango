"""
Django settings for AutoTestDjango project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
from pathlib import Path
# from os import environ
from AutoTestDjango.settings.ENV import *

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent
BASE_DIR_BACKEND = '/mnt/bolean/bolean_test_django/'

TEST = False
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '(!1)6q5)$2h8g=j6*=oaim$x+d0s-ob9=7advcy8pcp$8ahpl3'

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'test_task',
    'django.contrib.admin',
    'django.contrib.messages',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'drf_yasg',
    'django_filters',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'AutoTestDjango.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'AutoTestDjango.wsgi.application'
ASGI_APPLICATION = 'AutoTestDjango.asgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
}

EMAIL_HOST = ''
DEFAULT_FROM_EMAIL = 'name <address>'
EMAIL_HOST_USER = 'address'

CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
)

CORS_ALLOW_HEADERS = (
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
)

BASE_REDIS = 'redis://localhost:6379/'


# celery配置
CELERY_RESULT_BACKEND = BASE_REDIS + '2'
CELERY_BROKER_URL = BASE_REDIS + '1'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'
CELERY_ACCEPT_CONTENT = ['json']

LOG_CONFIG = None
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# NGINX_FILE_PATH = '/etc/nginx/sites-available/auditor_v2.conf'
CERTIFICATE_DIR = '/etc/nginx/cert'

MEDIA_URL = '/media/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
TMP_PATH = '/tmp'

REDIS_DB = '0'

CELERY_DEFAULT_QUEUE = 'celery'

# """
# hook_server和默认队列的任务使用gevent启动
# """
# CELERY_TASK_ROUTES = {
#     'hook_server.tasks.*': {
#         'queue': 'hook_server',
#         'routing_key': 'hook_server'
#     }
# }

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        }
    },
    'formatters': {
        'verbose': {
            'format': '[%(asctime)s][%(levelname)s][%(filename)s][%(module)s][%(funcName)s][%(lineno)d] %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S %z',
            'style': '%',
        }
    },
    'root': {
        'handlers': ['console'],
        'level': LOG_LEVEL,
    },
    'loggers': {
        'django': {
            'propagate': True,
        }
    }
}

DRIVER_PATH = os.path.join(BASE_DIR, 'utils/webdriver')
REPORT_PATH = os.path.join(BASE_DIR, "utils/ui_core/reports")
LOG_FILE = os.path.join(BASE_DIR, "utils/ui_core/logs")
RECORD_PATH = os.path.join(BASE_DIR, "utils/ui_core/record")
DATA_PATH = os.path.join(BASE_DIR, "utils/ui_core/data")
# 浏览器设置
BROWSER_TYPE = 1
WAIT_TIME_OUT = 10
# 接口测试设置
API_TIME_OUT = 10
